const fetch = require("node-fetch");
const { executablePath, ConsoleMessage } = require("puppeteer");
const puppeteer = require("puppeteer-extra");
const StealthPlugin = require("puppeteer-extra-plugin-stealth");
const AdsPlugin = require("puppeteer-extra-plugin-adblocker");
puppeteer.use(StealthPlugin(), AdsPlugin());
const colors = require("colors");
const { Webhook, MessageBuilder  } = require('discord-webhook-node');
const { HttpsProxyAgent } = require("https-proxy-agent");
const proxyChain = require("proxy-chain");
const axios = require("axios");
let set_cookie;
let size_id;
const UserAgent = require('user-agents');
const userAgent = new UserAgent();
// const proxy = new HttpsProxyAgent("http://tahadaboussi:aiobotagents@40.69.157.121:3128");
const dayjs = require("dayjs");
let Proxy_list = [];
// process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0;
let FINAL_proxy;
const prompt = require("prompt-sync")();
const sitekey = "6LeWwRkUAAAAAOBsau7KpuC9AV-6J8mhw4AjC3Xz";
const url = "https://www.supremenewyork.com/";
let Success = ""
let Style_name ;
let Product_name ;
let size_name
const hook = new Webhook("https://discord.com/api/webhooks/821005723293974548/L6QWyGhGXBUfos2bqlEfA9bg5WJNle4Ga4w4m6Iz5w7AkhxqdanRfQmGtU8eLkzPxEuE");
const IMAGE_URL = 'https://us.123rf.com/450wm/rungkhun/rungkhun1709/rungkhun170900370/86295503-stock-vector-letter-x-logo-design-template-technology-abstract-dot-connection-cross-vector-logo-icon-circle-logot.jpg?ver=6';
//! -------------------------------------------------------------------------- */
//!                                  PRODUCT info                              */
//! -------------------------------------------------------------------------- */
// KeyWordd = "Work Pant";
// color = "Brown Stripe";
// size = "30";
//-------------------------------------------------------------------------- */ *//////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                  PRODUCT info                              */ *//////////////////////////////////////////////////////////////////////////////////////////////////////////
// -------------------------------------------------------------------------- */ *//////////////////////////////////////////////////////////////////////////////////////////////////////////
const { Worker,isMainThread, workerData,threadId,} = require("worker_threads");
Proxy_list = [];
let pUser = "",
  pPass = "",
  TOKEN_LIST = [];
let Final_product_Id;
time1 = new Date();
/* -------------------------------------------------------------------------- */
/*                               Sleep function                               */
/* -------------------------------------------------------------------------- */
function sleep(ms) {
  return new Promise((resolve) => {
    setTimeout(resolve, ms);
  });
}
//! -------------------------------------------------------------------------- *//////////////////////////////////////////////////////////////////////////////////////////////////////////
//!                                     ATC                                    *//////////////////////////////////////////////////////////////////////////////////////////////////////////
//! -------------------------------------------------------------------------- *//////////////////////////////////////////////////////////////////////////////////////////////////////////
var ATC_headers = {
  "User-Agent":
  `${userAgent}`,
  Accept: "application/json",
  "Accept-Language": "en-US,en;q=0.5",
  "X-Requested-With": "XMLHttpRequest",
  "Content-Type": "application/x-www-form-urlencoded",
  Origin: "https://www.supremenewyork.com",
  DNT: "1",
  Connection: "keep-alive",
  Referer: "https://www.supremenewyork.com/mobile/",
  Pragma: "no-cache",
  "Cache-Control": "no-cache",
  TE: "Trailers",
};
let ATC ;
var atc_url = `https://www.supremenewyork.com/shop/${Final_product_Id}/add.json`;
async function atc(User, Pass, Proxyy, atc_url, Process_ID, key_word) {
  const proxy = new HttpsProxyAgent(`http://${User}:${Pass}@${Proxyy}`);
  const params = new URLSearchParams();
  params.append("s", size_id);
  params.append("st", Style_id);
  params.append("h", 1);
  params.append("chk", chk);
  // params.append("uconfirmed",true);
  ATC_Time = new Date();
  var res = await axios.post(atc_url, params, {
    httpsAgent: proxy,
    //   proxy : {
    //   host : "127.0.0.1" ,
    //   port : "8888"
    // },
    ATC_headers,
  });
  set_cookie = res.headers["set-cookie"];
  // console.log(res.headers)
  // console.log(`${set_cookie}`.green);
  // 198.24.171.42:7383:LV16100241-LV1610023998-48:5a17399947
  // 198.24.171.42:7383:LV16100241-LV1610023998-49:5a17399947
  // 198.24.171.42:7383:LV16100241-LV1610023998-50:5a17399947
  // 38.240.41.37:5851:mgjtnrju:DaPm7HiH
  // 38.240.43.240:7017:mgjtnrju:DaPm7HiH
  // 38.240.40.69:6877:mgjtnrju:DaPm7HiH
  console.log("----------------------------------------------------------------------------------------".red);
  console.log("ATC finshed".green);
  console.log(res.data);
  console.log("ATC Time :".green + `${new Date() - ATC_Time}`.yellow);
  console.log("----------------------------------------------------------------------------------------".red);
  ATC = res.data.success
  if (res.data.success == true || res.data[0].in_stock == true) {
    console.log("successfully ATC For Product:".green + `${key_word}`.yellow);
     Success = "true"
    console.log( "----------------------------------------------------------------------------------------".red);
  } else {
    console.log(`Failed to ATC For Product :`.red + `${key_word}`.yellow );
  }
  // console.log(res.data.cart[0].in_stock);
}
let i = 0;
//!-------------------------------------------------------------------------- *//////////////////////////////////////////////////////////////////////////////////////////////////////////
//?                                    product fetch                            *//////////////////////////////////////////////////////////////////////////////////////////////////////////
//! -------------------------------------------------------------------------- *//////////////////////////////////////////////////////////////////////////////////////////////////////////
Product_fetch = async (User, Pass, Proxyy, Process_ID,key_word,sizee,Style,category) => {
  now = new Date();
  const proxy = new HttpsProxyAgent(`http://${User}:${Pass}@${Proxyy}`);
  const https = require("https");
  https.get("https://www.supremenewyork.com/mobile_stock.json",
    { agent: proxy },
    (res) => {
      // console.log(res)
      var body = "";
      res.on("data", function (chunk) {
        body += chunk;
      });
      res.on("end", function () {
        var resp = JSON.parse(body);
        // console.log(resp.products_and_categories)
        data_wanted = resp.products_and_categories[category]
        // console.log(data_wanted)
        // console.log(key_word)
        let desiredItem2
        try{
         desiredItem2 = data_wanted.find((item) =>
          item.name.includes(key_word)
        );
      }catch(e){
        console.log("Could not find", key_word , "Trying Again")
      }
      Product_name = desiredItem2.name
        // console.log("Http Time", desiredItem2.id);
        if (i > 10000) {
          desiredItem2 = {
            id: "Cant find the item , Please Check your keywords.".red,
          };
        }
        try {
          console.log("Product id : " +desiredItem2.id);
        } catch (e) {
          i++;
          console.log(`Number Of tries: `.green + ` ${i}`.yellow);
          test = new Date();
          console.log(`retrying time :`.green + `${test - now}`.red);
          Product_fetch(User, Pass, Proxyy, Process_ID);
        }
        try {
          Final_product_Id = desiredItem2.id;
        } catch (e) {
        
        }
        console.log("----------------------------------------------------------------------------------------".red);
        //? -------------------------------------------------------------------------- */
        //?                      Can be used for random color/size                     */
        //? -------------------------------------------------------------------------- */
        console.log("Product  ID:".green, `${Final_product_Id}`.yellow);
        let later = new Date();
        console.log("Taken time 1 :".green, `${later - now}`.yellow);
        console.log("----------------------------------------------------------------------------------------".red);
        
      });
    }
  );
  while (typeof Final_product_Id !== "number") {
    await sleep(50);
  }
  // https.get(`https://www.supremenewyork.com/shop/hwz7l51x4.json`,
  Size_t = new Date();
  https.get(`https://www.supremenewyork.com/shop/${Final_product_Id}.json`,
    { agent: proxy },
    (res) => {
      // console.log(res)
      var body = "";
      res.on("data", function (chunk) {
        body += chunk;
      });
      res.on("end", function () {
        var resp = JSON.parse(body);
        // console.log(resp)
        desired_color = resp.styles;
        // console.log(data_wanted)
        // console.log(desired_color)
        // console.log(desired_color)
        let desiredItem ;
        try{
         desiredItem = desired_color.find((item) =>
          item.name.includes(Style)
        );
      }catch(e){
        console.log("Style Not Found")
      }
        // console.log("Http Time", desiredItem2.id);
        try{
          Product_Url = desiredItem.bigger_zoomed_url
          console.log(desiredItem)
          Style_name = desiredItem.name
        Style_id = desiredItem.id;
        chk = desiredItem.chk;
        size = desiredItem.sizes;
      }catch(e){
        console.log("check style or size Cant Found")
        return;
      }        // console.log(size)

//? -------------------------------------------------------------------------- *////////////////////////////////////////////////////////////////////////////////////////////////////////
//?                                   SIZe                                   */////////////////////////////////////////////////////////////////////////////////////////////////////////
//? -------------------------------------------------------------------------- *////////////////////////////////////////////////////////////////////////////////////////////////////////
  try{
    for (i = 0; i < size.length; i++) {
      console.log(size[i]) 
      // if (size[i].name == sizee) {
      //   size_id = size[i].id;
      // }
      if (size[i].stock_level == 1) {
        size_name  = size[i].name
        size_id = size[i].id;
        console.log("Product in stock".green.bold)
      }else if (size[i].stock_level == 0){
        console.log("product Out Of stock".red.bold)
      }
      else("Fail ")
    }
      }catch(e){
        console.log("Size Not Found ")
      }
        console.log("----------------------------------------------------------------------------------------".red);
        console.log("-------------------------------------".red +`ATC INFO ${Process_ID}`.green.bold +"-------------------------------------------".red);
        console.log("Size : ".green + `${size_name}`.yellow);
        console.log("Product name : ".green + `${Product_name}`.yellow);
        console.log("Chk ID : ".green + `${chk}`.yellow);

        // console.log("Style : ".green + `${Style_name}`.yellow);
        // console.log("Style ID : ".green + `${Style_id}`.yellow);
        // console.log("Size ID : ".green + `${size_id}`.yellow);
        console.log("Taken Time :".green + `${new Date() - Size_t}`.yellow);
      });
    }
  );
  while (typeof Style_id == "undefined" && typeof chk == "undefined") {
    await sleep(500);
  }
  atc(User, Pass, Proxyy, atc_url,Process_ID,key_word);
  /* -------------------------------------------------------------------------- */
  /*                              Multi Processing                              */
  /* -------------------------------------------------------------------------- */
};
// console.log(desired_product.name)
//! -------------------------------------------------------------------------- */
/*                              Captcha Harvester                             */
/* -------------------------------------------------------------------------- */
Captcha_Harvester = async (Proxyy, Puser, Ppass, key_word) => {
  const options = {
    width: 480,
    height: 750,
    host: url,
    sitekey,
  };
  const browser = await puppeteer.launch({
    executablePath: "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
    headless: false,
    devtools: false,
    ignoreHTTPSErrors: true,
    ignoreDefaultArgs: "--enable-automation",
    // excludeSwitches: 'enable-automation',
    // 38.240.41.120:5789:mgjtnrju:DaPm7HiH
    // 38.240.44.189:5926:mgjtnrju:DaPm7HiH
    // 38.240.45.249:5310:mgjtnrju:DaPm7HiH
    // 198.24.171.42:7383:LV16100241-LV1610023998-46:5a17399947
    // 198.24.171.42:7383:LV16100241-LV1610023998-47:5a17399947
    // 198.24.171.42:7383:LV16100241-LV1610023998-48:5a17399947
    args: [
      " --enable-automation",
      "--no-sandbox",
      "--ignore-certificate-errors",
      "--enable-features=NetworkService",
      "--allow-running-insecure-content",
      "--disable-web-security",
      `--window-size=${options.width},${options.height}`,
      "--proxy-server=" + Proxyy,
      // '--user-data-dir=C:\\Users\\USER\\AppData\\Local\\Google\\Chrome\\User Data'

    ],
  });
  const page = await browser.newPage();
  await page.setDefaultNavigationTimeout(0); 
  await page.authenticate({
    username: Puser,
    password: Ppass,
  });
  await page.setViewport({
    width: 480,
    height: 750,
  });
  await page.setUserAgent( `Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36`);
  await page.setRequestInterception(true);
  const captchaReset = () => window.grecaptcha.reset();
  await page.exposeFunction("sendCaptcha", (token) => {
    const captchaItem = {
      token,
      timestamp: dayjs().format(),
      host: options.host,
      sitekey: options.sitekey,
    };
    if(ATC )
    TOKEN_LIST.push(captchaItem.token);
    token = TOKEN_LIST[0];
    if (typeof TOKEN_LIST[0] !== "undefined") {
      console.log("Captcha Solved".green);
      (async() =>{
        try {
          const session = await page.target().createCDPSession();
          const {windowId} = await session.send('Browser.getWindowForTarget');
          await session.send('Browser.setWindowBounds', {windowId, bounds: {windowState: 'minimized'}}); 
           } catch (e) {
         console.log("Captcha Harvester Closed");
    }
  })()
    }
    (async () => {
      await page.evaluate(captchaReset);
    })();
  });
  while(Success == ''){
    await sleep(200)
  }
  const captchaTemplate = `
<!DOCTYPE html>
<html lang="en">
<head>
  <title>${key_word}</title>
  <script src="https://www.google.com/recaptcha/api.js" async defer></script>
  <style>
    .flex {
      display: flex;
    }
    .justify-center {
      justify-content: center;
    }
    .items-center {
      align-items: center;
    }
    .mt-6 {
      margin-top: 1.5rem;
    }
  </style>
</head>
<body>
  <div class="flex justify-center items-center mt-6">
    <div id="captchaFrame" class="g-recaptcha" data-callback="sendCaptcha" data-sitekey=${options.sitekey} data-theme="dark"></div>
  </div>
</body>
</html>
`;
  page.on("request", (req) => {
    if (req.url() === options.host) {
      req.respond({
        status: 200,
        contentType: "text/html",
        body: captchaTemplate,
      });
    } else {
      req.continue();
    }
  });
  await page.goto(options.host);


};
 
/* -------------------------------------------------------------------------- */
/*                                    MAIN                                    */
/* -------------------------------------------------------------------------- */
MAIN = async (User, Pass, Proxyy, Process_ID,key_word,sizee,Style,category) => {
  const p_proxy = `http://${User}:${Pass}@${Proxyy}`;
  const newProxyUrl = await proxyChain.anonymizeProxy(p_proxy);
  // console.log(newProxyUrl);
  const tick = new Date();
  const browser = await puppeteer.launch({
    // headless: false,
    // ignoreDefaultArgs: "--enable-automation",
    executablePath:"D:\\Desktop\\node_modules\\puppeteer\\.local-chromium\\win64-848005\\chrome-win\\chrome.exe",
    args: [
      "start-maximized",
      "--disable-blink-features=AutomationControlled",
      "--no-sandbox",
      "--disable-setuid-sandbox",
      "--disable-ipv6",
      "--disable-infobars",
      '--disable-dev-shm-usage',
      '--disable-accelerated-2d-canvas',
      '--no-first-run',
      '--no-zygote',
      '--disable-gpu',
      "--window-position=0,0",
      "--ignore-certifcate-errors",
      "--ignore-certifcate-errors-spki-list",
      '--user-agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36"',
      // "--proxy-server=104.43.139.250:3128"
      `--proxy-server=${newProxyUrl}`,
      // `--proxy-server=127.0.0.1:8888`,
      // '--user-data-dir=%userprofile%\\AppData\\Local\\Temp\\puppeteer_dev_profile-2jutFo'
    ],
  });
  const page = await browser.newPage();

  await page.setRequestInterception(true);
  page.on("request", (req) => {
    if (req.resourceType() == "font" || req.resourceType() == "image") {
      req.abort();
    } else {
      req.continue();
    }
  });
  // Bypass hairline feature
  await page.evaluateOnNewDocument(() => {
    const elementDescriptor = Object.getOwnPropertyDescriptor(
      HTMLElement.prototype,
      "offsetHeight"
    );
    Object.defineProperty(HTMLDivElement.prototype, "offsetHeight", {
      ...elementDescriptor,
      get: function () {
        if (this.id === "modernizr") {
          return 1;
        }
        return elementDescriptor.get.apply(this);
      },
    });
  });
  await page.evaluateOnNewDocument(() => {
    Object.defineProperty(window, "navigator", {
      value: new Proxy(window.navigator, {
        get: function (target, name) {
          if (name === "webdriver") return undefined;
          return typeof target[name] === "function"
            ? target[name].bind(target)
            : target[name];
        },
      }),
    });
  });
  await page.evaluateOnNewDocument(() => {
    delete navigator.__proto__.webdriver;
  });
  // await page.evaluateOnNewDocument(() => {
  //   Object.defineProperty(navigator, 'webdriver', ()=>{})
  // });
  await page.evaluateOnNewDocument(() => {
    navigator.mediaDevices.getUserMedia = navigator.webkitGetUserMedia = navigator.mozGetUserMedia = navigator.getUserMedia = webkitRTCPeerConnection = RTCPeerConnection = MediaStreamTrack = undefined;
  });
  test1 = new Date();

  tack = new Date();
  console.log("Launching The browser Time :".green + `${tack - tick}`.yellow);
  const now = new Date();
  //! -------------------------------------------------------------------------- */
  //!                                 Fetch part                                 */
  //! -------------------------------------------------------------------------- */
  let i = 1;
  await Product_fetch(User, Pass, Proxyy, Process_ID,key_word,sizee,Style,category);
  await console.log("Fetching PID".green);
  try {
    while (typeof set_cookie == "undefined") {
      neww = new Date();
      await sleep(100);
      newwer = new Date();
      // console.log(newwer - neww);
      // i++;
      // if (i > 100) {
      //   console.log("Couldnt Find the id please check keywords".red);
      //   break;
      // }
    }
  } catch (e) {
    console.log("Cant Find The ID Please Check the KeyWords");
  }
  await page.setDefaultNavigationTimeout(0); 

  await page.setExtraHTTPHeaders({
    //  "Host": "www.supremenewyork.com",
    Connection: "keep-alive",
    "User-Agent":`${userAgent}`,
    Accept:"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
    "Sec-Fetch-Site": "same-origin",
    "Sec-Fetch-Mode": "cors",
    "Sec-Fetch-Dest": "empty",
    Accept: "application/json",
    "Sec-Fetch-User": "1",
    "Sec-Fetch-Dest": "document",
    referer: `https://www.supremenewyork.com/mobile/`,
    "Accept-Encoding": " gzip, deflate, br",
    "Accept-Language": " en-GB,en-US;q=0.9,en;q=0.8",
    Cookie: `${set_cookie}`,
    // "dnt": "1",
    // "sec-fetch-site" : "same-origin"
  });
  // console.log("Loading Website".green);
  times = new Date();
  const Browser = new Date();
  if(ATC !== true){
    console.log("Failed To Complete Action of Product :".red, `${key_word}`.yellow)
    try{
    browser.close()
  }catch(e){
    console.log("")
  }
    return;
  }
  await page.goto("https://www.supremenewyork.com/checkout");
  Captcha_Harvester(Proxyy, User, Pass , key_word);

  // console.log(`${new Date() - times}`.yellow.bold);
  const browser_end = new Date();
  console.log("Taken time To Load Browser: ".green,`${browser_end - Browser}`.yellow ,`,For Product :`.green+` ${key_word}`.yellow);
  try {
    times = new Date();
    await page.waitForSelector("#order_billing_name", { visible: true });
    // await page.type("#order_billing_name", "Taha dabousssi");
    // await page.type("#order_email", "Taha_daboussi@hotmail.com");
    // await page.type("#order_tel", "813-610-8412");
    // await page.type("#bo", "Forest Hills Dr.");
    // await page.type("#oba3", "number 3");
    // await page.type("#order_billing_zip", "91601");
    // await page.type("#order_billing_city", "Timbuktu");
    // await page.type("#order_billing_state", "AZ");
    // await page.type("#orcer", "146");
    // await page.type("#rnsnckrn", "4040 6754 6392 8658");
    // await page.click("#cart-cc > fieldset > p > label > div > ins");
    // ---------------------------------------------------------------------------------------------------
    await page.waitForSelector("#order_billing_name", { visible: true });
    await page.$eval("#order_billing_name",(el) => (el.value = "lino landino"));
    await page.$eval("#order_email",(el) => (el.value = "lino25vera@hotmail.com"));
    await page.$eval("#order_tel", (el) => (el.value = "6085355923"));
    await page.$eval("#bo", (el) => (el.value = "745 North Star Drive"));
    await page.$eval("#oba3", (el) => (el.value = "number 3  "));
    await page.$eval("#order_billing_zip", (el) => (el.value = "53718"));
    await page.$eval("#order_billing_city", (el) => (el.value = "Madison"));
    await page.$eval("#order_billing_state", (el) => (el.value = "WI"));
    await page.$eval("#credit_card_year", (el) => (el.value = "2022"));
    // await page.$eval("#credit_card_month", (el) => (el.value = "09"));
    await page.$eval("#orcer", (el) => (el.value = "889"));
    await page.$eval("#order_billing_country", (el) => (el.value = "USA"));
     console.log("Time To fill the Checkout :".green+`${new Date() - times}`.yellow );
    await page.$eval("#rnsnckrn", (el) => (el.value = "5245069281381797"));
    await page.click("#cart-cc > fieldset > p > label > div > ins");
    console.log("Final Time :".green, `${new Date() - test1}`.yellow);
    console.log("Finshed Checkout...".green)
//     await page.click('#pay > input');
//     preCaptcha = await page.evaluate(`
//     $('body > div:nth-child(6)').hide();
//     $('body > div:nth-child(7)').hide();
//     if ($('#cart-cc > fieldset > div.errors')[0]) {
//         $('#cart-cc > fieldset > div.errors').text();
//     } else {
//         "";
//     }
// `);
  }catch (e) {
    console.log(e)
    console.log("An error IN the billing info ocured".red);
  }
  // console.log("TIme Finalo ".green + new Date() - time1)
  console.log("Waiting For Captcha ".green + `${key_word}`.yellow);
  while (typeof TOKEN_LIST[0] == "undefined") {
  await sleep(100);
    // if (typeof TOKEN_LIST[0] !== "undefined") {
    //   // console.log(TOKEN_LIST[0]);
    // }
  }
  token = TOKEN_LIST[0];
  await page.evaluate(`document.querySelector('#g-recaptcha-response').value = '` + token + `';`);
  await page.evaluate(function () {
    checkoutAfterCaptcha();
  });
  // await new Promise(resolve => setTimeout(resolve, 10000));
    var lastResponse = '';
    while (lastResponse == '') {
      // console.log(lastResponse)
      var lastResponse = await page.evaluate(`
      if ($('#cart-count')[0]) {
          $('#cart-count').text();
      } else if ($('#confirmation')[0]) {
          $('#confirmation').text();
      } else if ($('#cart-cc > fieldset > div.errors')[0]) {
          $('#cart-cc > fieldset > div.errors').text();
      } else {
          "";
      }
  `);
      if (lastResponse != '') {
          if (lastResponse.includes("Your order has been successfully process") //US
              ||
              lastResponse.includes("you will receive a shipping confirmation with the tracking number") ||
              lastResponse.includes("ご注文内容の明細は既にご登録頂いたEメールアドレスに送信されております") //JP
              ||
              lastResponse.includes("Your order has been successfully submitted") //UK
              ||
              lastResponse.includes("Your order has been submitted")) {
                hook.setUsername('Success');
                hook.setAvatar(IMAGE_URL);
                const embed = new MessageBuilder()
                .setTitle('Successful Checkout')
                // .setAuthor('Author here', 'https://cdn.discordapp.com/embed/avatars/0.png', 'https://www.google.com')
                // .setURL('https://www.google.com')
                .addField('Store', 'SupremeUS', true)
                .addField('Mode', 'Hybrid',true)
                .addField('Size', `${size_name}`,true)
                .addField('Style', `${Style_name}`,true)
                .setColor('#008000')
                .setThumbnail(`https:${Product_Url}`)
                .setDescription(`${Product_name}`)
                // .setImage('https://cdn.discordapp.com/embed/avatars/0.png')
                .setFooter('X-BOT', 'https://us.123rf.com/450wm/rungkhun/rungkhun1709/rungkhun170900370/86295503-stock-vector-letter-x-logo-design-template-technology-abstract-dot-connection-cross-vector-logo-icon-circle-logot.jpg?ver=6')
                .setTimestamp();
                hook.send(embed);
                console.log("----------------------------------------------------------------------------------------".red);
                console.log("Checkout successfully".green.bold);
                console.log("----------------------------------------------------------------------------------------".red);
          }
          else if(lastResponse.includes("Unfortunately we are unable to process your order. This could be due to your payment being declined by your card issuer.You have not been charged by Supreme, but in some cases your bank may still hold funds in your account. This is only a temporary hold that usually will be removed after 48 to 72 hours, depending on your individual credit card issuer.If you'd like to re-enter your card details go back and try again.")){
            console.log("----------------------------------------------------------------------------------------".red);
            console.log("Credit Card Declined".red.bold);
            console.log("----------------------------------------------------------------------------------------".red);
            hook.setUsername('Success');
            hook.setAvatar(IMAGE_URL);
            const embed = new MessageBuilder()
            .setTitle('Credit Card Declined')
            // .setAuthor('Author here', 'https://cdn.discordapp.com/embed/avatars/0.png', 'https://www.google.com')
            // .setURL('https://www.google.com')
            .addField('Store', 'SupremeUS', true)
            .addField('Mode', 'Hybrid',true)
            .addField('Size', `${size_name}`,true)
            .addField('Style', `${Style_name}`,true)
            .setColor('#FF0000')
            .setThumbnail(`https:${Product_Url}`)
            .setDescription(`${Product_name}`)
            // .setImage('https://cdn.discordapp.com/embed/avatars/0.png')
            .setFooter('X-BOT', 'https://us.123rf.com/450wm/rungkhun/rungkhun1709/rungkhun170900370/86295503-stock-vector-letter-x-logo-design-template-technology-abstract-dot-connection-cross-vector-logo-icon-circle-logot.jpg?ver=6')
            .setTimestamp();
            hook.send(embed);
          } 
          else {
            console.log('cmd=LastMessage;msg=' + lastResponse);
          }
      } else {
        console.log('waiting for the last response'.yellow)
          await new Promise(resolve => setTimeout(resolve, 1000));
      }
  }
// console.log(lastResponse)
};
Multi_processing = (() => {
  return async () => {
    if (isMainThread) {
//! -------------------------------------------------------------------------- */
//!                              BIlling Info                                  */
//! -------------------------------------------------------------------------- */
      billing = [ 
        //  {
        //    Keyword: "Supreme®/Nike® Air Force 1 Low",
        //   Color: "Green",
        //   size: '8' ,
        //   // size: "8.5",
        //   category : "Shoes"
        // },
       {
          Keyword: "Work Pant",
          Color: "Brown Stripe",
          size: "30",
          category : `Pants`
        }, 
        // {
        //   Keyword: "Work Pant",
        //   Color: "Brown Stripe",
        //   size: "30",
        //   category : `Pants`
        // }, 
        // {
        //   Keyword: "Work Pant",
        //   Color: "Brown Stripe",
        //   size: "30",
        //   category : `Pants`
        // },
        // {
        //   Keyword: "Work Pant",
        //   Color: "Brown Stripe",
        //   size: "30",
        //   category : `Pants`
        // },
        // {
        //   Keyword: "Work Pant",
        //   Color: "Brown Stripe",
        //   size: "30",
        //   category : `Pants`
        // },
        // {
        //   Keyword: "Work Pant",
        //   Color: "Brown Stripe",
        //   size: "30",
        //   category : `Pants`
        // }
      ];
//? -------------------------------------------------------------------------- */
//?                                 Proxy input                                */
//? -------------------------------------------------------------------------- */
      let ProxyList = await prompt(" Input Proxy List ");
      Proxy_list = ProxyList.split("\r");
      console.log(`${Proxy_list.length} tasks has been started `.green.bold)
//! -------------------------------------------------------------------------- */
//!                           Starting MultiThreading                          */
//! -------------------------------------------------------------------------- */
      for (let i = 0; i < Proxy_list.length; i++) {
         const idx = i % billing.length;
         console.log("i",i)
         console.log("idx",idx)
          new Worker(__filename, {
          workerData: {
            Proxy_list: Proxy_list[i],
            KeyWord: billing[idx].Keyword,
            Color: billing[idx].Color,
            size: billing[idx].size,
            category: billing[idx].category,
            index: i,
          },
        });
      }
    } else {
      // User, Pass, Proxyy, Process_ID
      // console.log(workerData.KeyWord)
      // console.log(workerData)
      let key_word = workerData.KeyWord;
      let Style = workerData.Color; 
      let size = workerData.size; 
      let category = workerData.category;
      // console.log(key_word);
      /* -------------------------------------------------------------------------- */
      /*                               Proxie spliting                              */
      /* -------------------------------------------------------------------------- */
      parts = workerData.Proxy_list.split(":");
      if (parts.length == 4) {
        Aproxy = parts[0] + ":" + parts[1];
        pUser = parts[2];
        pPass = parts[3];
      }
      // console.log( `************************************************`.red + `Task Number ${workerData.index  1}`.yellow.bold +`************************************************`.red);
     
      // console.log("Proxies : ".green + parts);
      console.log("Worker Of ID ".green + threadId);
      /* -------------------------------------------------------------------------- */
      /*                                Main Function                               */
      /* -------------------------------------------------------------------------- */
      try {
        // console.log(KeyWord)
        // Product_fetch(pUser,pPass,Aproxy,threadId)
        // key_word,sizee,color,category
        // console.log(key_word)
        // console.log(Style)
        // console.log(key_word)
        MAIN(pUser, pPass, Aproxy,threadId,key_word,size,Style,category);
      } catch (e) {
        console.log("Failed".red);
        console.log(e);
      }
    }
  };
})();
// while ( typeof set_cookie =="undefined"){
//   await sleep(100)
// }
Multi_processing();
